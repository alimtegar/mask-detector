[{"/Users/admin/Documents/Projects/mask-detector/src/reportWebVitals.js":"1","/Users/admin/Documents/Projects/mask-detector/src/App.js":"2","/Users/admin/Documents/Projects/mask-detector/src/index.js":"3","/Users/admin/Documents/Projects/mask-detector/src/components/Sidebar.js":"4","/Users/admin/Documents/Projects/mask-detector/src/components/ModelStatus.js":"5","/Users/admin/Documents/Projects/mask-detector/src/components/Count.js":"6","/Users/admin/Documents/Projects/mask-detector/src/components/Video.js":"7","/Users/admin/Documents/Projects/mask-detector/src/components/Media.js":"8"},{"size":362,"mtime":1606491684339,"results":"9","hashOfConfig":"10"},{"size":1212,"mtime":1611830461677,"results":"11","hashOfConfig":"10"},{"size":551,"mtime":1606713524700,"results":"12","hashOfConfig":"10"},{"size":1326,"mtime":1611830452871,"results":"13","hashOfConfig":"10"},{"size":2167,"mtime":1611816519504,"results":"14","hashOfConfig":"10"},{"size":1134,"mtime":1606643653269,"results":"15","hashOfConfig":"10"},{"size":11565,"mtime":1612183289584,"results":"16","hashOfConfig":"10"},{"size":1163,"mtime":1612178126689,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1jup8tf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Documents/Projects/mask-detector/src/reportWebVitals.js",[],["38","39"],"/Users/admin/Documents/Projects/mask-detector/src/App.js",[],["40","41"],"/Users/admin/Documents/Projects/mask-detector/src/index.js",[],["42","43"],"/Users/admin/Documents/Projects/mask-detector/src/components/Sidebar.js",[],"/Users/admin/Documents/Projects/mask-detector/src/components/ModelStatus.js",[],"/Users/admin/Documents/Projects/mask-detector/src/components/Count.js",[],"/Users/admin/Documents/Projects/mask-detector/src/components/Video.js",["44","45","46"],"import { useState, useEffect, useRef, useCallback } from 'react';\nimport * as faceApi from 'face-api.js';\nimport * as tf from '@tensorflow/tfjs';\n// import \"@tensorflow/tfjs-node\";\nimport Dropzone from 'react-dropzone';\n\nconst InfoIcon = () => (\n    <svg className=\"h-4 w-4 mr-1\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" style={{ marginTop: -1, }}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n);\n\nconst Video = ({ log, setLog, media, setMedia, setModelStatus, setCount }) => {\n    // Constants\n    const VIDEO_WIDTH = 480; // 640\n    const VIDEO_HEIGHT = 360; // 480\n    const FACE_API_MODELS_URI = '/models/face-api-models';\n    const MASK_DETECTOR_MODEL_URI = '/models/mask-detector-model/model.json';\n\n    // States\n    const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n\n    // Refs\n    const videoRef = useRef();\n    const canvasRef = useRef();\n    const tmpCanvasRef = useRef();\n\n    // Functions\n    const renderDetectionBox = useCallback((faceDetections, maskDetectorModel) => {\n        setCount((prevCount) => ({\n            ...prevCount,\n            face: faceDetections.length,\n            masked: 0,\n            notMasked: 0,\n        }));\n        // let maskedCount = 0;\n        // let notMaskedCount = 0;\n\n        const ctx = canvasRef.current.getContext('2d');\n        const tmpCtx = tmpCanvasRef.current.getContext('2d');\n\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        // Font options\n        const font = \"16px sans-serif\";\n        ctx.font = font;\n        ctx.textBaseline = \"top\";\n\n        setLog('Predicting whether face/s is wearing a mask or not...');\n\n        faceDetections.map((faceDetection) => {\n            if (faceDetection) {\n                setLog('Face detected');\n\n                const x = faceDetection.box._x / videoRef.current.videoWidth * VIDEO_WIDTH;\n                const y = faceDetection.box._y / videoRef.current.videoHeight * VIDEO_HEIGHT;\n                const w = faceDetection.box._width / videoRef.current.videoWidth * VIDEO_WIDTH;\n                const h = faceDetection.box._height / videoRef.current.videoHeight * VIDEO_HEIGHT;\n\n                // Crop video frame\n                tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.drawImage(\n                    videoRef.current,\n                    x, // x coordinate where to start cropping the frame\n                    y, // y coordinate where to start cropping the frame\n                    w, // w (width) of the cropped frame\n                    h, // h (height) of the cropped frame\n                    0, // x coordinate where to start placing the cropped frame\n                    0, // y coordinate where to start placing the cropped frame\n                    w, // w (width) of the cropped frame\n                    h  // h (height) of the cropped frame\n                );\n\n                predict(maskDetectorModel)\n                    .then((prediction) => {\n                        setLog('Mask detected')\n\n                        let [withMask, withoutMask] = prediction;\n\n                        console.log({ prediction });\n\n                        // Tresholding the prediction\n                        const treshold = 0.0; // 0.3\n\n                        withMask -= treshold;\n                        withoutMask += treshold;\n\n                        // console.log('withMask', withMask);\n                        // console.log('withoutMask', withoutMask);\n\n                        let color = '#FF0000';\n                        let label = 'not masked';\n\n                        if (withMask > withoutMask) {\n                            color = '#00FF00';\n                            label = 'masked'\n\n                            // maskedCount = maskedCount + 1;\n                            // console.log('maskedCount', maskedCount);\n                            setCount((prevCount) => ({\n                                ...prevCount,\n                                masked: prevCount.masked + 1,\n                            }));\n                        } else {\n                            setCount((prevCount) => ({\n                                ...prevCount,\n                                notMasked: prevCount.notMasked + 1,\n                            }));\n                        }\n\n                        // Draw the box\n                        // const color = withMask > withoutMask ? '#00FF00' : '#FF0000';\n\n                        setLog('Rendering detection box...');\n\n                        ctx.strokeStyle = color;\n                        ctx.lineWidth = 3;\n                        ctx.strokeRect(x, y, w, h);\n\n                        // Draw the label \n                        // const label = withMask > withoutMask ? 'masked' : 'not masked';\n\n                        ctx.fillStyle = color;\n\n                        const textWidth = ctx.measureText(label).width;\n                        const textHeight = parseInt(font, 10);\n\n                        ctx.fillRect(x - 2, y - (textHeight + 4), textWidth + 4, textHeight + 4);\n\n                        ctx.fillStyle = \"#000000\";\n                        ctx.fillText(label, x, y - textHeight - 2);\n                    });\n            }\n\n            return true;\n        });\n    }, [setCount]);\n\n    const detect = useCallback((maskDetectorModel) => {\n        setLog('Detecting faces...');\n\n        faceApi.detectAllFaces(videoRef.current)\n            .then((faceDetections) => {\n                renderDetectionBox(faceDetections, maskDetectorModel);\n                requestAnimationFrame(() => {\n                    detect(maskDetectorModel);\n                });\n            }).catch((error) => console.error(error));\n    }, [renderDetectionBox]);\n\n    // Effects\n    useEffect(() => {\n        if (media === 'webcam') {\n            navigator.mediaDevices\n                .getUserMedia({\n                    audio: false,\n                    video: {\n                        // Prevent different size between video and canvas\n                        width: VIDEO_WIDTH,\n                        height: VIDEO_HEIGHT,\n                    },\n                })\n                .then((stream) => {\n                    window.stream = stream;\n                    videoRef.current.srcObject = stream;\n                });\n        }\n\n        const faceApiModelPromise = faceApi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODELS_URI);\n        const maskDetectorModelPromise = tf.loadLayersModel(MASK_DETECTOR_MODEL_URI);\n\n        setLog('Loading Face API models...');\n\n        faceApiModelPromise\n            .then(() => {\n                setModelStatus((prevModelStatus) => ({\n\n                    ...prevModelStatus,\n                    faceApi: {\n                        isLoading: false,\n                        isLoaded: true,\n                    },\n                }));\n\n                setLog('Face API Models are loaded');\n                setLog('Loading Mask Detector model...');\n\n                maskDetectorModelPromise\n                    .then((maskDetectorModel) => {\n                        setModelStatus((prevModelStatus) => ({\n                            ...prevModelStatus,\n                            maskDetector: {\n                                isLoading: false,\n                                isLoaded: true,\n                            },\n\n                        }));\n\n                        setLog('Mask Detector Model is loaded');\n\n                        detect(maskDetectorModel);\n                    })\n                    .catch((error) => {\n                        setModelStatus((prevModelStatus) => ({\n                            ...prevModelStatus,\n                            maskDetector: {\n                                isLoading: false,\n                                isLoaded: false,\n                            },\n\n                        }));\n                        console.error(error)\n                    });\n            })\n            .catch((error) => {\n                setModelStatus((prevModelStatus) => ({\n                    ...prevModelStatus,\n                    faceApi: {\n                        isLoading: false,\n                        isLoaded: false,\n                    },\n\n                }));\n                console.error(error)\n            });\n    }, [detect, setModelStatus]);\n\n    const predict = (maskDetectorModel) => {\n        setLog('Predicting...')\n\n        // Preprocessing image\n        let image = tf.browser.fromPixels(tmpCanvasRef.current);\n        image = tf.image.resizeBilinear(image, [224, 224]);\n        image = tf.cast(image, 'float32');\n        image = tf.tensor4d(Array.from(image.dataSync()), [1, 224, 224, 3])\n\n        return maskDetectorModel.predict(image, { batchSize: 32 }).data();\n    }\n\n    return (\n        <div className=\"relative flex justify-center items-center w-full h-screen\">\n            <div className=\"flex flex-col\">\n                <div className=\"flex justify-center items-center\">\n                    <div\n                        className=\"relative inline-flex justify-center items-center bg-gray-300 overflow-hidden\"\n                        style={{\n                            width: VIDEO_WIDTH,\n                            height: VIDEO_HEIGHT\n                        }}\n                    >\n                        {media === 'video' && !isVideoLoaded ? (\n                            <Dropzone\n                                onDrop={(acceptedFiles) => {\n                                    const acceptedFile = acceptedFiles[0];\n\n                                    videoRef.current.src = URL.createObjectURL(acceptedFile);\n                                    setIsVideoLoaded(true);\n                                }}\n                            >\n                                {({ getRootProps, getInputProps }) => (\n                                    <section className=\"absolute z-30 text-gray-500\">\n                                        <div {...getRootProps()}>\n                                            <input {...getInputProps()} />\n                                            <p>Drag 'n' drop some files here, or click to select files</p>\n                                        </div>\n                                    </section>\n                                )}\n                            </Dropzone>\n                        ) : null}\n\n                        <video\n                            className=\"absolute z-10\"\n                            autoPlay\n                            playsInline\n                            width={VIDEO_WIDTH}\n                            height={VIDEO_HEIGHT}\n                            ref={videoRef}\n                        />\n                        <canvas\n                            className=\"absolute z-20\"\n                            width={VIDEO_WIDTH}\n                            height={VIDEO_HEIGHT}\n                            ref={canvasRef}\n                        />\n                    </div>\n                </div>\n\n                <span className=\"flex items-center text-xs text-gray-600 mt-4\">\n                    <InfoIcon />\n\n                    {log}\n                </span>\n\n            </div>\n            <canvas\n                ref={tmpCanvasRef}\n                width={VIDEO_HEIGHT / 2}\n                height={VIDEO_HEIGHT}\n                className=\"absolute top-0 left-0 hidden\"\n            />\n        </div>\n    );\n}\n\nexport default Video;\n","/Users/admin/Documents/Projects/mask-detector/src/components/Media.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"47","replacedBy":"53"},{"ruleId":"49","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":137,"column":8,"nodeType":"57","endLine":137,"endColumn":18,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":149,"column":8,"nodeType":"57","endLine":149,"endColumn":28,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":226,"column":8,"nodeType":"57","endLine":226,"endColumn":32,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],["63"],["64"],["63"],["64"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'predict' and 'setLog'. Either include them or remove the dependency array. If 'setLog' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["65"],"React Hook useCallback has a missing dependency: 'setLog'. Either include it or remove the dependency array. If 'setLog' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["66"],"React Hook useEffect has missing dependencies: 'media' and 'setLog'. Either include them or remove the dependency array. If 'setLog' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [predict, setCount, setLog]",{"range":"74","text":"75"},"Update the dependencies array to be: [renderDetectionBox, setLog]",{"range":"76","text":"77"},"Update the dependencies array to be: [detect, media, setLog, setModelStatus]",{"range":"78","text":"79"},[5405,5415],"[predict, setCount, setLog]",[5849,5869],"[renderDetectionBox, setLog]",[8434,8458],"[detect, media, setLog, setModelStatus]"]
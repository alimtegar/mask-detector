[{"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/reportWebVitals.js":"1","/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/App.js":"2"},{"size":362,"mtime":1606491684339,"results":"3","hashOfConfig":"4"},{"size":2060,"mtime":1606496720877,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s1o5zh",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/reportWebVitals.js",[],"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/App.js",["11","12"],"\nimport { useEffect, useRef } from 'react';\nimport * as faceapi from 'face-api.js';\n\nfunction App() {\n  const WIDTH = 360;\n  const HEIGHT = 480;\n  const FACE_API_MODELS_URI = '/models/face-api-models';\n  const videoRef = useRef();\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    const webCamPromise = navigator.mediaDevices\n      .getUserMedia({ video: true, })\n      .then((stream) => {\n        window.stream = stream;\n        videoRef.current.srcObject = stream;\n\n        return new Promise((resolve, _) => {\n          videoRef.current.onloadedmetadata = () => {\n            resolve();\n          };\n        });\n      });\n\n    const faceapiPromise = faceapi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODELS_URI);\n\n    Promise.all([\n      webCamPromise,\n      faceapiPromise,\n    ])\n      .then(() => {\n        detectFrame(videoRef.current)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const detectFrame = (input) => {\n    faceapi.detectAllFaces(input)\n      .then((faceDetections) => {\n        renderDetectionBox(faceDetections);\n\n        setTimeout(() => { detectFrame(videoRef.current); }, 1000);\n      });\n  };\n\n  const renderDetectionBox = (faceDetections) => {\n    const ctx = canvasRef.current.getContext('2d');\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    faceDetections.map((faceDetection) => {\n      if (faceDetection) {\n        // console.log(faceDetection);\n        const x = faceDetection.box._x;\n        const y = faceDetection.box._y;\n        const w = faceDetection.box._width;\n        const h = faceDetection.box._height;\n\n        // Draw the bounding box\n        ctx.strokeStyle = \"#FF0000\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x, y, w, h);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <video\n        autoPlay\n        playsInline\n        muted\n        width={WIDTH}\n        height={HEIGHT}\n        ref={videoRef}\n      />\n      <canvas\n        width={WIDTH}\n        height={HEIGHT}\n        ref={canvasRef}\n      />\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"13","severity":1,"message":"14","line":38,"column":6,"nodeType":"15","endLine":38,"endColumn":8,"suggestions":"16"},{"ruleId":"17","severity":1,"message":"18","line":54,"column":40,"nodeType":"19","messageId":"20","endLine":54,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'detectFrame'. Either include it or remove the dependency array.","ArrayExpression",["21"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"22","fix":"23"},"Update the dependencies array to be: [detectFrame]",{"range":"24","text":"25"},[925,927],"[detectFrame]"]
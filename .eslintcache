[{"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/reportWebVitals.js":"1","/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/App.js":"2","/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/index.js":"3"},{"size":362,"mtime":1606491684339,"results":"4","hashOfConfig":"5"},{"size":5383,"mtime":1606559368526,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606491684337,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s1o5zh",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/reportWebVitals.js",[],"/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/App.js",["15","16","17"],"\nimport { useEffect, useRef } from 'react';\nimport * as faceapi from 'face-api.js';\nimport * as tf from '@tensorflow/tfjs';\n\n// Import video\n// import Video from './assets/videos/video.mp4';\n\n// Import styles\nimport './App.css';\n\nfunction App() {\n  const VIDEO_WIDTH = 480;\n  const VIDEO_HEIGHT = 360;\n  const FACE_API_MODELS_URI = '/models/face-api-models';\n  const MASK_DETECTOR_MODEL_URI = '/models/mask-detector-model/model.json';\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  const tmpCanvasRef = useRef();\n\n  useEffect(() => {\n    const webCamPromise = navigator.mediaDevices\n      .getUserMedia({ video: true, })\n      .then((stream) => {\n        window.stream = stream;\n        videoRef.current.srcObject = stream;\n\n        return new Promise((resolve, _) => {\n          videoRef.current.onloadedmetadata = () => {\n            resolve();\n          };\n        });\n      });\n    const faceapiModelPromise = faceapi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODELS_URI);\n    const maskDetectorModelPromise = tf.loadLayersModel(MASK_DETECTOR_MODEL_URI);\n\n    console.log('Webcam and models are loading');\n\n    Promise.all([\n      webCamPromise,\n      faceapiModelPromise,\n      maskDetectorModelPromise,\n    ])\n      .then((result) => {\n        const _maskDetectorModel = result[2];\n\n        console.log('Webcam and models are loaded');\n        // console.log('mask detector model from promise', _maskDetectorModel.summary());\n\n        detect(_maskDetectorModel);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const detect = (maskDetectorModel) => {\n    faceapi.detectAllFaces(videoRef.current)\n      .then((faceDetections) => {\n        renderDetectionBox(faceDetections, maskDetectorModel);\n        // setTimeout(() => { detect(maskDetectorModel); }, 1000);\n        requestAnimationFrame(() => {\n          // console.log('maskDetectorModel from animation', maskDetectorModel);\n          detect(maskDetectorModel);\n        });\n      });\n  };\n\n  const renderDetectionBox = (faceDetections, maskDetectorModel) => {\n    const ctx = canvasRef.current.getContext('2d');\n    const tmpCtx = tmpCanvasRef.current.getContext('2d');\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    faceDetections.map((faceDetection) => {\n      if (faceDetection) {\n        console.log('A face is detected');\n\n        const x = faceDetection.box._x;\n        const y = faceDetection.box._y;\n        const w = faceDetection.box._width;\n        const h = faceDetection.box._height;\n\n        // Crop video frame\n        tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.drawImage(\n          videoRef.current,\n          x, // Crop from x\n          y, // Crop from y\n          w, // Crop with width w\n          h, // Crop with height h\n          0, // Place from x\n          0, // Place from y\n          w, // Place with width w\n          h // Place width height h\n        );\n\n        predict(maskDetectorModel)\n          .then((outputs) => {\n            let [withMask, withoutMask] = outputs;\n\n            const treshold = 0.25;\n\n            withMask -= treshold;\n            withoutMask += treshold;\n\n            console.log('withMask', withMask);\n            console.log('withoutMask', withoutMask);\n            console.log();\n\n            const color = withMask > withoutMask ? '#00FF00' : '#FF0000';\n            const label = withMask > withoutMask ? 'With mask' : 'Without mask';\n\n            // Draw the bounding box\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 4;\n            ctx.strokeRect(x, y, w, h);\n          });\n      }\n    });\n  };\n\n  const predict = (maskDetectorModel) => {\n    // const is_new_od_model = maskDetectorModel.inputs.length === 3;\n\n    // const input_size = maskDetectorModel.inputs[0].shape[1];\n    // let inputs = tf.browser.fromPixels(tmpCanvasRef.current, 3);\n    // console.log('inputs', inputs);\n    // inputs = tf.image.resizeBilinear(inputs.expandDims().toFloat(), [input_size, input_size]);\n    // if (is_new_od_model) {\n    //   console.log(\"Object Detection Model V2 detected.\");\n    //   inputs = is_new_od_model ? inputs : inputs.reverse(-1); // RGB->BGR for old models\n    // }\n\n    let inputs = tf.browser.fromPixels(tmpCanvasRef.current);\n\n    inputs = tf.image.resizeBilinear(inputs, [224, 224]);\n    inputs = tf.cast(inputs, 'float32');\n    inputs = tf.tensor4d(Array.from(inputs.dataSync()), [1, 224, 224, 3])\n\n    // console.log('inputs', inputs);\n    // console.log('maskDetectorModel', maskDetectorModel);\n\n    return maskDetectorModel.predict(inputs, { batchSize: 32 }).data();\n    // return new Promise((resolve) => resolve([0, 0]));\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"preview\">\n        <video\n          className=\"fixed\"\n          autoPlay\n          playsInline\n          muted\n          width={VIDEO_WIDTH}\n          height={VIDEO_HEIGHT}\n          ref={videoRef}\n        // src={Video}\n        // type=\"video/mp4\"\n        // loop\n        />\n        <canvas\n          className=\"fixed\"\n          width={VIDEO_WIDTH}\n          height={VIDEO_HEIGHT}\n          ref={canvasRef}\n        />\n\n      </div>\n      <canvas\n        ref={tmpCanvasRef}\n        width={VIDEO_HEIGHT / 2}\n        height={VIDEO_HEIGHT}\n        style={{ position: 'absolute', left: 0, top: 0 }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/admin/Documents/Projects/real-time-mask-detector-v2/src/index.js",[],{"ruleId":"18","severity":1,"message":"19","line":55,"column":6,"nodeType":"20","endLine":55,"endColumn":8,"suggestions":"21"},{"ruleId":"22","severity":1,"message":"23","line":75,"column":40,"nodeType":"24","messageId":"25","endLine":75,"endColumn":42},{"ruleId":"26","severity":1,"message":"27","line":112,"column":19,"nodeType":"28","messageId":"29","endLine":112,"endColumn":24},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'detect'. Either include it or remove the dependency array.","ArrayExpression",["30"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'label' is assigned a value but never used.","Identifier","unusedVar",{"desc":"31","fix":"32"},"Update the dependencies array to be: [detect]",{"range":"33","text":"34"},[1560,1562],"[detect]"]